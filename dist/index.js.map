{"version":3,"sources":["index.js","curry.js","arrays.js","matchers.js","rank.js"],"names":["curry","fn","args","length","more","each_until","visitor","target","items","Array","prototype","slice","call","index","continue_iteration","each_in_reverse_until","_each","direction","each","each_in_reverse","operators","reduce","initial_value_or_symbol","reducer_or_initial_value_for_symbolic_reduce","rest","pop","indexOf","symbol","initial_value","body","reduce_using_reducer","Function","apply","concat","reducer","start_index","undefined","accumulator","value","array","first_with_target","condition","result","match","find_first_in_direction","condition_or_target","isArray","last","first","any","none","filter","constraint","acc","val","push","map","mapper","flat_map","results","next_item","flatten","item","uniq_with_target_and_mapper","mapped","findIndex","uniq","mapper_or_target","true_for_all","max","value_resolver","max_value","item_value","sort_with_comparer_and_target","target_to_sort","sort","comparer_or_target","generate","number","_","fill","extend","matcher","extended_matcher","and","other","or","combineMatchers","combineStrategy","initialMatcher","criterion","criteria","never_matches","anything","second","not","is_null","is_defined","is_undefined","is_null_or_undefined","is_type","expected_type","is_string","is_boolean","equal_to_any_values","values","equal_to","regex","pattern","test","greater_than","is_empty","trim","less_than","any_element_matches","element_criteria","target_array","all_elements_match","greater_than_or_equal_to","less_than_or_equal_to","between","start","end","is_numeric","isNaN","is_function","is_object","is_integer","is_null_or_empty","is_array","is_true","is_false","is_not_null_or_undefined","empty","no_match","previous_character_was_a_space","INDEX_MATCH_VALUE","REGULAR_MATCH_VALUE","SIGNIFICANT_WORD_START_VALUE","FINAL_ADJUSTMENT_VALUE","full_phrase","partial_phrase","running_score","character_score","match_index","final_score","full_phrase_lowercase","toLowerCase","full_phrase_length","partial_phrase_lowercase","partial_phrase_length","starting_index"],"mappings":"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","file":"index.js","sourceRoot":"../lib","sourcesContent":["export { default } from './curry';\n","const curry = (fn, ...args) =>\n  fn.length <= args.length ? fn(...args) : (...more) => curry(fn, ...args, ...more);\n\nexport default curry;\n","import curry from '@developwithpassion/curry_js';\n\nexport const each_until = curry((visitor, target) => {\n  const items = Array.prototype.slice.call(target, 0);\n\n  for (let index = 0; index < items.length; index++) {\n    const continue_iteration = visitor(items[index], index, items);\n    if (typeof continue_iteration !== 'undefined' && continue_iteration !== null) {\n      if (continue_iteration === false) {\n        return;\n      }\n    }\n  }\n});\n\nexport const each_in_reverse_until = curry((visitor, target) => {\n  const items = Array.prototype.slice.call(target, 0);\n\n  for (let index = items.length - 1; index >= 0; index--) {\n    const continue_iteration = visitor(items[index], index, items);\n\n    if (typeof continue_iteration !== 'undefined' && continue_iteration !== null) {\n      if (continue_iteration === false) {\n        return;\n      }\n    }\n  }\n});\n\nconst _each = direction =>\n  curry((visitor, target) =>\n    direction((...args) => {\n      visitor(...args);\n    }, target)\n  );\n\nexport const each = _each(each_until);\n\nexport const each_in_reverse = _each(each_in_reverse_until);\n\nconst operators = ['+', '-', '/', '*'];\n\nexport const reduce = curry(\n  (initial_value_or_symbol, reducer_or_initial_value_for_symbolic_reduce, ...rest) => {\n    const target = rest.pop();\n\n    if (operators.indexOf(initial_value_or_symbol) > -1)\n      return reduce_using_operator.apply(\n        null,\n        [initial_value_or_symbol, reducer_or_initial_value_for_symbolic_reduce, target].concat(rest)\n      );\n\n    return reduce_using_reducer.apply(\n      null,\n      [reducer_or_initial_value_for_symbolic_reduce, initial_value_or_symbol, target].concat(rest)\n    );\n  }\n);\n\nfunction reduce_using_reducer(reducer, initial_value, target) {\n  let start_index = 0;\n\n  if (initial_value === undefined) {\n    initial_value = target[0];\n    start_index = 1;\n  }\n\n  let accumulator = initial_value;\n\n  each((value, index, array) => {\n    if (index >= start_index) {\n      accumulator = reducer(accumulator, value, index, array);\n    }\n  }, target);\n  return accumulator;\n}\n\nfunction reduce_using_operator(symbol, initial_value, target) {\n  const body = `return accumulator ${symbol}=current_value`;\n\n  const reducer = new Function('accumulator, current_value', body);\n\n  return reduce_using_reducer(reducer, initial_value, target);\n}\n\nconst first_with_target = curry((direction, condition, target) => {\n  let result = null;\n\n  direction((...args) => {\n    const match = condition(...args);\n\n    if (match) result = args[0];\n\n    return !match;\n  }, target);\n\n  return result;\n});\n\nfunction find_first_in_direction(direction) {\n  return (condition_or_target, ...rest) => {\n    if (Array.isArray(condition_or_target)) return condition_or_target[0] || null;\n    if (condition_or_target === null) return null;\n    const condition = condition_or_target;\n\n    return rest.length > 0\n      ? first_with_target(direction, condition, rest.pop())\n      : first_with_target(direction, condition);\n  };\n}\n\nexport const last = find_first_in_direction(each_in_reverse_until);\n\nexport const first = find_first_in_direction(each_until);\n\nexport const any = curry((condition, target) => !!first(condition, target));\n\nexport const none = curry((condition, target) => !any(condition, target));\n\nexport const filter = curry((constraint, target) =>\n  reduce(\n    [],\n    (acc, val, ...args) => {\n      if (constraint(val, ...args)) {\n        acc.push(val);\n      }\n      return acc;\n    },\n    target\n  )\n);\n\nexport const map = curry((mapper, target) =>\n  reduce(\n    [],\n    (acc, ...args) => {\n      acc.push(mapper(...args));\n      return acc;\n    },\n    target\n  )\n);\n\nexport const flat_map = curry((mapper, target) =>\n  reduce([], (results, next_item) => results.concat(mapper(next_item)), target)\n);\n\nconst flatten = flat_map(item => (Array.isArray(item) ? flatten(item) : [item]));\n\nconst uniq_with_target_and_mapper = curry((mapper, target) =>\n  filter((value, index) => {\n    const mapped = mapper(value);\n    const first_matching_index = target.findIndex(value => mapper(value) === mapped);\n    return index === first_matching_index;\n  }, target)\n);\n\nexport const uniq = (mapper_or_target, ...args) =>\n  args.length === 0 && Array.isArray(mapper_or_target)\n    ? uniq_with_target_and_mapper(val => val, mapper_or_target)\n    : uniq_with_target_and_mapper(mapper_or_target, ...args);\n\nexport const true_for_all = curry((condition, target) =>\n  reduce(true, (acc, ...args) => acc && condition(...args), target)\n);\n\nexport const max = curry((value_resolver, target) =>\n  reduce(\n    0,\n    (max_value, ...args) => {\n      const item_value = value_resolver(...args);\n      return item_value > max_value ? item_value : max_value;\n    },\n    target\n  )\n);\n\nconst sort_with_comparer_and_target = (target, ...args) => {\n  const target_to_sort = target || [];\n  const results = target_to_sort.slice(0);\n\n  results.sort(...args);\n\n  return results;\n};\n\nexport const sort = comparer_or_target => {\n  if (comparer_or_target === null) return [];\n  if (Array.isArray(comparer_or_target)) return sort_with_comparer_and_target(comparer_or_target);\n\n  return target => sort_with_comparer_and_target(target, comparer_or_target);\n};\n\nexport const generate = (number, mapper) => map((_, index) => mapper(index), new Array(number).fill(null));\n\nexport default {\n  each,\n  each_until,\n  each_in_reverse,\n  each_in_reverse_until,\n  last,\n  first,\n  any,\n  none,\n  filter,\n  map,\n  flat_map,\n  flatten,\n  uniq,\n  true_for_all,\n  reduce,\n  sort,\n  max,\n  generate\n};\n","import { any, true_for_all } from '@developwithpassion/arrays_js';\n\nconst extend = matcher => {\n  const extended_matcher = (...args) => matcher(...args);\n\n  extended_matcher.and = other => and(matcher, other);\n  extended_matcher.or = other => or(matcher, other);\n\n  return extended_matcher;\n};\n\nconst combineAnd = (first, second) => condition(item => first(item) && second(item));\n\nconst combineOr = (first, second) => condition(item => first(item) || second(item));\n\nconst combineMatchers = (combineStrategy, initialMatcher) => (...criterion) =>\n  extend(criterion.reduce((acc, criteria) => combineStrategy(acc, criteria), initialMatcher));\n\nexport const condition = criteria => extend((...args) => criteria(...args));\n\nexport const never_matches = condition(() => false);\n\nexport const anything = condition(() => true);\n\nexport const and = combineMatchers(combineAnd, anything);\n\nexport const or = combineMatchers(combineOr, never_matches);\n\nexport const not = other => extend((...args) => !other(...args));\n\nexport const is_null = condition(value => value === null);\n\nexport const is_defined = condition(value => typeof value !== 'undefined');\n\nexport const is_undefined = not(is_defined);\n\nexport const is_null_or_undefined = is_null.or(is_undefined);\n\nexport const is_type = expected_type => not(is_null_or_undefined).and(val => typeof val === expected_type);\n\nexport const is_string = is_type('string');\n\nexport const is_boolean = is_type('boolean');\n\nexport const equal_to_any_values = (...values) => condition(val => values.indexOf(val) > -1);\n\nexport const equal_to = value => condition(val => val === value);\n\nexport const regex = pattern => condition(val => pattern.test(val));\n\nexport const greater_than = val => condition(value => value > val);\n\nexport const is_empty = condition(value => value.trim() === '');\n\nexport const less_than = val => condition(value => value < val);\n\nexport const any_element_matches = element_criteria =>\n  condition(target_array => any(element_criteria, target_array));\n\nexport const all_elements_match = element_criteria =>\n  condition(target_array => true_for_all(element_criteria, target_array));\n\nexport const greater_than_or_equal_to = value => greater_than(value).or(equal_to(value));\n\nexport const less_than_or_equal_to = value => less_than(value).or(equal_to(value));\n\nexport const between = (start, end) => greater_than_or_equal_to(start).and(less_than_or_equal_to(end));\n\nexport const is_numeric = is_type('number').and(not(isNaN));\n\nexport const is_function = is_type('function');\n\nexport const is_object = is_type('object');\n\nexport const is_integer = is_numeric.and(val => val % 1 === 0);\n\nexport const is_null_or_empty = is_null.or(is_string.and(is_empty));\n\nexport const is_array = condition(Array.isArray);\n\nexport const is_true = equal_to(true);\n\nexport const is_false = equal_to(false);\n\nexport default {\n  condition,\n\n  not,\n\n  equal_to,\n\n  is_null,\n\n  never_matches,\n\n  anything,\n\n  is_string,\n\n  regex,\n\n  is_boolean,\n\n  is_defined,\n\n  is_undefined,\n\n  equal_to_any_values,\n\n  greater_than,\n\n  is_empty,\n\n  less_than,\n\n  any_element_matches,\n\n  all_elements_match,\n\n  between,\n\n  greater_than_or_equal_to,\n\n  is_null_or_undefined,\n\n  is_not_null_or_undefined: not(is_null_or_undefined),\n\n  is_numeric,\n\n  is_function,\n\n  is_object,\n\n  is_integer,\n\n  is_null_or_empty,\n\n  is_array,\n\n  is_true,\n\n  is_false,\n\n  and,\n\n  or\n};\n","import { equal_to } from '@developwithpassion/matchers_js';\n\nconst empty = equal_to('');\nconst no_match = equal_to(-1);\nconst previous_character_was_a_space = equal_to(' ');\n\nconst INDEX_MATCH_VALUE = 0.7;\nconst REGULAR_MATCH_VALUE = 0.1;\nconst SIGNIFICANT_WORD_START_VALUE = 0.8;\nconst FINAL_ADJUSTMENT_VALUE = 0.15;\n\nexport default (full_phrase, partial_phrase) => {\n  if (full_phrase === partial_phrase) return 1;\n\n  if (empty(partial_phrase)) return 0;\n\n  let running_score = 0;\n  let character_score;\n  let final_score = 0;\n\n  const full_phrase_lowercase = full_phrase.toLowerCase();\n  const full_phrase_length = full_phrase.length;\n\n  const partial_phrase_lowercase = partial_phrase.toLowerCase();\n  const partial_phrase_length = partial_phrase.length;\n  let match_index;\n  let starting_index = 0;\n\n  for (let index = 0; index < partial_phrase_length; index++) {\n    match_index = full_phrase_lowercase.indexOf(partial_phrase_lowercase[index], starting_index);\n\n    if (no_match(match_index)) return 0;\n\n    if (starting_index === match_index) {\n      character_score = INDEX_MATCH_VALUE;\n    } else {\n      character_score = REGULAR_MATCH_VALUE;\n\n      if (previous_character_was_a_space(full_phrase[match_index - 1]))\n        character_score += SIGNIFICANT_WORD_START_VALUE;\n    }\n\n    if (full_phrase[match_index] === partial_phrase[index]) character_score += REGULAR_MATCH_VALUE;\n\n    running_score += character_score;\n    starting_index = match_index + 1;\n  }\n\n  final_score = 0.5 * (running_score / full_phrase_length + running_score / partial_phrase_length);\n\n  if (partial_phrase_lowercase[0] === full_phrase_lowercase[0] && final_score < 0.85) {\n    final_score += FINAL_ADJUSTMENT_VALUE;\n  }\n\n  return final_score;\n};\n"]}